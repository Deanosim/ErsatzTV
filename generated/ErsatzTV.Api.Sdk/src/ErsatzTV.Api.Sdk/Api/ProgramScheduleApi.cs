/*
 * ErsatzTV API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ErsatzTV.Api.Sdk.Client;
using ErsatzTV.Api.Sdk.Model;

namespace ErsatzTV.Api.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProgramScheduleApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteProgramSchedule"></param>
        /// <returns></returns>
        void ApiSchedulesDelete(DeleteProgramSchedule deleteProgramSchedule);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteProgramSchedule"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiSchedulesDeleteWithHttpInfo(DeleteProgramSchedule deleteProgramSchedule);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ProgramScheduleViewModel&gt;</returns>
        List<ProgramScheduleViewModel> ApiSchedulesGet();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ProgramScheduleViewModel&gt;</returns>
        ApiResponse<List<ProgramScheduleViewModel>> ApiSchedulesGetWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addProgramScheduleItem"></param>
        /// <returns>List&lt;ProgramScheduleItemViewModel&gt;</returns>
        List<ProgramScheduleItemViewModel> ApiSchedulesItemsAddPost(AddProgramScheduleItem addProgramScheduleItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addProgramScheduleItem"></param>
        /// <returns>ApiResponse of List&lt;ProgramScheduleItemViewModel&gt;</returns>
        ApiResponse<List<ProgramScheduleItemViewModel>> ApiSchedulesItemsAddPostWithHttpInfo(AddProgramScheduleItem addProgramScheduleItem);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateProgramSchedule"></param>
        /// <returns>ProgramScheduleViewModel</returns>
        ProgramScheduleViewModel ApiSchedulesPatch(UpdateProgramSchedule updateProgramSchedule);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateProgramSchedule"></param>
        /// <returns>ApiResponse of ProgramScheduleViewModel</returns>
        ApiResponse<ProgramScheduleViewModel> ApiSchedulesPatchWithHttpInfo(UpdateProgramSchedule updateProgramSchedule);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProgramSchedule"></param>
        /// <returns>ProgramScheduleViewModel</returns>
        ProgramScheduleViewModel ApiSchedulesPost(CreateProgramSchedule createProgramSchedule);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProgramSchedule"></param>
        /// <returns>ApiResponse of ProgramScheduleViewModel</returns>
        ApiResponse<ProgramScheduleViewModel> ApiSchedulesPostWithHttpInfo(CreateProgramSchedule createProgramSchedule);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programScheduleId"></param>
        /// <returns>ProgramScheduleViewModel</returns>
        ProgramScheduleViewModel ApiSchedulesProgramScheduleIdGet(int programScheduleId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programScheduleId"></param>
        /// <returns>ApiResponse of ProgramScheduleViewModel</returns>
        ApiResponse<ProgramScheduleViewModel> ApiSchedulesProgramScheduleIdGetWithHttpInfo(int programScheduleId);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programScheduleId"></param>
        /// <returns>List&lt;ProgramScheduleItemViewModel&gt;</returns>
        List<ProgramScheduleItemViewModel> ApiSchedulesProgramScheduleIdItemsDelete(int programScheduleId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programScheduleId"></param>
        /// <returns>ApiResponse of List&lt;ProgramScheduleItemViewModel&gt;</returns>
        ApiResponse<List<ProgramScheduleItemViewModel>> ApiSchedulesProgramScheduleIdItemsDeleteWithHttpInfo(int programScheduleId);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programScheduleId"></param>
        /// <returns>List&lt;ProgramScheduleItemViewModel&gt;</returns>
        List<ProgramScheduleItemViewModel> ApiSchedulesProgramScheduleIdItemsGet(int programScheduleId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programScheduleId"></param>
        /// <returns>ApiResponse of List&lt;ProgramScheduleItemViewModel&gt;</returns>
        ApiResponse<List<ProgramScheduleItemViewModel>> ApiSchedulesProgramScheduleIdItemsGetWithHttpInfo(int programScheduleId);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programScheduleId"></param>
        /// <param name="replaceProgramScheduleItem"></param>
        /// <returns>List&lt;ProgramScheduleItemViewModel&gt;</returns>
        List<ProgramScheduleItemViewModel> ApiSchedulesProgramScheduleIdItemsPut(int programScheduleId, List<ReplaceProgramScheduleItem> replaceProgramScheduleItem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programScheduleId"></param>
        /// <param name="replaceProgramScheduleItem"></param>
        /// <returns>ApiResponse of List&lt;ProgramScheduleItemViewModel&gt;</returns>
        ApiResponse<List<ProgramScheduleItemViewModel>> ApiSchedulesProgramScheduleIdItemsPutWithHttpInfo(int programScheduleId, List<ReplaceProgramScheduleItem> replaceProgramScheduleItem);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProgramScheduleApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteProgramSchedule"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiSchedulesDeleteAsync(DeleteProgramSchedule deleteProgramSchedule, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteProgramSchedule"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiSchedulesDeleteWithHttpInfoAsync(DeleteProgramSchedule deleteProgramSchedule, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ProgramScheduleViewModel&gt;</returns>
        System.Threading.Tasks.Task<List<ProgramScheduleViewModel>> ApiSchedulesGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ProgramScheduleViewModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProgramScheduleViewModel>>> ApiSchedulesGetWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addProgramScheduleItem"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ProgramScheduleItemViewModel&gt;</returns>
        System.Threading.Tasks.Task<List<ProgramScheduleItemViewModel>> ApiSchedulesItemsAddPostAsync(AddProgramScheduleItem addProgramScheduleItem, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addProgramScheduleItem"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ProgramScheduleItemViewModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProgramScheduleItemViewModel>>> ApiSchedulesItemsAddPostWithHttpInfoAsync(AddProgramScheduleItem addProgramScheduleItem, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateProgramSchedule"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProgramScheduleViewModel</returns>
        System.Threading.Tasks.Task<ProgramScheduleViewModel> ApiSchedulesPatchAsync(UpdateProgramSchedule updateProgramSchedule, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateProgramSchedule"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProgramScheduleViewModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProgramScheduleViewModel>> ApiSchedulesPatchWithHttpInfoAsync(UpdateProgramSchedule updateProgramSchedule, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProgramSchedule"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProgramScheduleViewModel</returns>
        System.Threading.Tasks.Task<ProgramScheduleViewModel> ApiSchedulesPostAsync(CreateProgramSchedule createProgramSchedule, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProgramSchedule"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProgramScheduleViewModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProgramScheduleViewModel>> ApiSchedulesPostWithHttpInfoAsync(CreateProgramSchedule createProgramSchedule, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programScheduleId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProgramScheduleViewModel</returns>
        System.Threading.Tasks.Task<ProgramScheduleViewModel> ApiSchedulesProgramScheduleIdGetAsync(int programScheduleId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programScheduleId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProgramScheduleViewModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProgramScheduleViewModel>> ApiSchedulesProgramScheduleIdGetWithHttpInfoAsync(int programScheduleId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programScheduleId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ProgramScheduleItemViewModel&gt;</returns>
        System.Threading.Tasks.Task<List<ProgramScheduleItemViewModel>> ApiSchedulesProgramScheduleIdItemsDeleteAsync(int programScheduleId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programScheduleId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ProgramScheduleItemViewModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProgramScheduleItemViewModel>>> ApiSchedulesProgramScheduleIdItemsDeleteWithHttpInfoAsync(int programScheduleId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programScheduleId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ProgramScheduleItemViewModel&gt;</returns>
        System.Threading.Tasks.Task<List<ProgramScheduleItemViewModel>> ApiSchedulesProgramScheduleIdItemsGetAsync(int programScheduleId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programScheduleId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ProgramScheduleItemViewModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProgramScheduleItemViewModel>>> ApiSchedulesProgramScheduleIdItemsGetWithHttpInfoAsync(int programScheduleId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programScheduleId"></param>
        /// <param name="replaceProgramScheduleItem"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ProgramScheduleItemViewModel&gt;</returns>
        System.Threading.Tasks.Task<List<ProgramScheduleItemViewModel>> ApiSchedulesProgramScheduleIdItemsPutAsync(int programScheduleId, List<ReplaceProgramScheduleItem> replaceProgramScheduleItem, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programScheduleId"></param>
        /// <param name="replaceProgramScheduleItem"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ProgramScheduleItemViewModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProgramScheduleItemViewModel>>> ApiSchedulesProgramScheduleIdItemsPutWithHttpInfoAsync(int programScheduleId, List<ReplaceProgramScheduleItem> replaceProgramScheduleItem, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProgramScheduleApi : IProgramScheduleApiSync, IProgramScheduleApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProgramScheduleApi : IProgramScheduleApi
    {
        private ErsatzTV.Api.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProgramScheduleApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProgramScheduleApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProgramScheduleApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProgramScheduleApi(String basePath)
        {
            this.Configuration = ErsatzTV.Api.Sdk.Client.Configuration.MergeConfigurations(
                ErsatzTV.Api.Sdk.Client.GlobalConfiguration.Instance,
                new ErsatzTV.Api.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ErsatzTV.Api.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ErsatzTV.Api.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ErsatzTV.Api.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProgramScheduleApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProgramScheduleApi(ErsatzTV.Api.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ErsatzTV.Api.Sdk.Client.Configuration.MergeConfigurations(
                ErsatzTV.Api.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ErsatzTV.Api.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ErsatzTV.Api.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ErsatzTV.Api.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProgramScheduleApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ProgramScheduleApi(ErsatzTV.Api.Sdk.Client.ISynchronousClient client, ErsatzTV.Api.Sdk.Client.IAsynchronousClient asyncClient, ErsatzTV.Api.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ErsatzTV.Api.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ErsatzTV.Api.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ErsatzTV.Api.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ErsatzTV.Api.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ErsatzTV.Api.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteProgramSchedule"></param>
        /// <returns></returns>
        public void ApiSchedulesDelete(DeleteProgramSchedule deleteProgramSchedule)
        {
            ApiSchedulesDeleteWithHttpInfo(deleteProgramSchedule);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteProgramSchedule"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ErsatzTV.Api.Sdk.Client.ApiResponse<Object> ApiSchedulesDeleteWithHttpInfo(DeleteProgramSchedule deleteProgramSchedule)
        {
            // verify the required parameter 'deleteProgramSchedule' is set
            if (deleteProgramSchedule == null)
                throw new ErsatzTV.Api.Sdk.Client.ApiException(400, "Missing required parameter 'deleteProgramSchedule' when calling ProgramScheduleApi->ApiSchedulesDelete");

            ErsatzTV.Api.Sdk.Client.RequestOptions localVarRequestOptions = new ErsatzTV.Api.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ErsatzTV.Api.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErsatzTV.Api.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = deleteProgramSchedule;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/schedules", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSchedulesDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteProgramSchedule"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiSchedulesDeleteAsync(DeleteProgramSchedule deleteProgramSchedule, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiSchedulesDeleteWithHttpInfoAsync(deleteProgramSchedule, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deleteProgramSchedule"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ErsatzTV.Api.Sdk.Client.ApiResponse<Object>> ApiSchedulesDeleteWithHttpInfoAsync(DeleteProgramSchedule deleteProgramSchedule, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'deleteProgramSchedule' is set
            if (deleteProgramSchedule == null)
                throw new ErsatzTV.Api.Sdk.Client.ApiException(400, "Missing required parameter 'deleteProgramSchedule' when calling ProgramScheduleApi->ApiSchedulesDelete");


            ErsatzTV.Api.Sdk.Client.RequestOptions localVarRequestOptions = new ErsatzTV.Api.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ErsatzTV.Api.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErsatzTV.Api.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = deleteProgramSchedule;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/schedules", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSchedulesDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ProgramScheduleViewModel&gt;</returns>
        public List<ProgramScheduleViewModel> ApiSchedulesGet()
        {
            ErsatzTV.Api.Sdk.Client.ApiResponse<List<ProgramScheduleViewModel>> localVarResponse = ApiSchedulesGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ProgramScheduleViewModel&gt;</returns>
        public ErsatzTV.Api.Sdk.Client.ApiResponse<List<ProgramScheduleViewModel>> ApiSchedulesGetWithHttpInfo()
        {
            ErsatzTV.Api.Sdk.Client.RequestOptions localVarRequestOptions = new ErsatzTV.Api.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ErsatzTV.Api.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErsatzTV.Api.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ProgramScheduleViewModel>>("/api/schedules", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSchedulesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ProgramScheduleViewModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProgramScheduleViewModel>> ApiSchedulesGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErsatzTV.Api.Sdk.Client.ApiResponse<List<ProgramScheduleViewModel>> localVarResponse = await ApiSchedulesGetWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ProgramScheduleViewModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ErsatzTV.Api.Sdk.Client.ApiResponse<List<ProgramScheduleViewModel>>> ApiSchedulesGetWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ErsatzTV.Api.Sdk.Client.RequestOptions localVarRequestOptions = new ErsatzTV.Api.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ErsatzTV.Api.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErsatzTV.Api.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ProgramScheduleViewModel>>("/api/schedules", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSchedulesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addProgramScheduleItem"></param>
        /// <returns>List&lt;ProgramScheduleItemViewModel&gt;</returns>
        public List<ProgramScheduleItemViewModel> ApiSchedulesItemsAddPost(AddProgramScheduleItem addProgramScheduleItem)
        {
            ErsatzTV.Api.Sdk.Client.ApiResponse<List<ProgramScheduleItemViewModel>> localVarResponse = ApiSchedulesItemsAddPostWithHttpInfo(addProgramScheduleItem);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addProgramScheduleItem"></param>
        /// <returns>ApiResponse of List&lt;ProgramScheduleItemViewModel&gt;</returns>
        public ErsatzTV.Api.Sdk.Client.ApiResponse<List<ProgramScheduleItemViewModel>> ApiSchedulesItemsAddPostWithHttpInfo(AddProgramScheduleItem addProgramScheduleItem)
        {
            // verify the required parameter 'addProgramScheduleItem' is set
            if (addProgramScheduleItem == null)
                throw new ErsatzTV.Api.Sdk.Client.ApiException(400, "Missing required parameter 'addProgramScheduleItem' when calling ProgramScheduleApi->ApiSchedulesItemsAddPost");

            ErsatzTV.Api.Sdk.Client.RequestOptions localVarRequestOptions = new ErsatzTV.Api.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ErsatzTV.Api.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErsatzTV.Api.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = addProgramScheduleItem;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<ProgramScheduleItemViewModel>>("/api/schedules/items/add", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSchedulesItemsAddPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addProgramScheduleItem"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ProgramScheduleItemViewModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProgramScheduleItemViewModel>> ApiSchedulesItemsAddPostAsync(AddProgramScheduleItem addProgramScheduleItem, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErsatzTV.Api.Sdk.Client.ApiResponse<List<ProgramScheduleItemViewModel>> localVarResponse = await ApiSchedulesItemsAddPostWithHttpInfoAsync(addProgramScheduleItem, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addProgramScheduleItem"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ProgramScheduleItemViewModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ErsatzTV.Api.Sdk.Client.ApiResponse<List<ProgramScheduleItemViewModel>>> ApiSchedulesItemsAddPostWithHttpInfoAsync(AddProgramScheduleItem addProgramScheduleItem, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'addProgramScheduleItem' is set
            if (addProgramScheduleItem == null)
                throw new ErsatzTV.Api.Sdk.Client.ApiException(400, "Missing required parameter 'addProgramScheduleItem' when calling ProgramScheduleApi->ApiSchedulesItemsAddPost");


            ErsatzTV.Api.Sdk.Client.RequestOptions localVarRequestOptions = new ErsatzTV.Api.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ErsatzTV.Api.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErsatzTV.Api.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = addProgramScheduleItem;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<List<ProgramScheduleItemViewModel>>("/api/schedules/items/add", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSchedulesItemsAddPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateProgramSchedule"></param>
        /// <returns>ProgramScheduleViewModel</returns>
        public ProgramScheduleViewModel ApiSchedulesPatch(UpdateProgramSchedule updateProgramSchedule)
        {
            ErsatzTV.Api.Sdk.Client.ApiResponse<ProgramScheduleViewModel> localVarResponse = ApiSchedulesPatchWithHttpInfo(updateProgramSchedule);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateProgramSchedule"></param>
        /// <returns>ApiResponse of ProgramScheduleViewModel</returns>
        public ErsatzTV.Api.Sdk.Client.ApiResponse<ProgramScheduleViewModel> ApiSchedulesPatchWithHttpInfo(UpdateProgramSchedule updateProgramSchedule)
        {
            // verify the required parameter 'updateProgramSchedule' is set
            if (updateProgramSchedule == null)
                throw new ErsatzTV.Api.Sdk.Client.ApiException(400, "Missing required parameter 'updateProgramSchedule' when calling ProgramScheduleApi->ApiSchedulesPatch");

            ErsatzTV.Api.Sdk.Client.RequestOptions localVarRequestOptions = new ErsatzTV.Api.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ErsatzTV.Api.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErsatzTV.Api.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = updateProgramSchedule;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<ProgramScheduleViewModel>("/api/schedules", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSchedulesPatch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateProgramSchedule"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProgramScheduleViewModel</returns>
        public async System.Threading.Tasks.Task<ProgramScheduleViewModel> ApiSchedulesPatchAsync(UpdateProgramSchedule updateProgramSchedule, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErsatzTV.Api.Sdk.Client.ApiResponse<ProgramScheduleViewModel> localVarResponse = await ApiSchedulesPatchWithHttpInfoAsync(updateProgramSchedule, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateProgramSchedule"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProgramScheduleViewModel)</returns>
        public async System.Threading.Tasks.Task<ErsatzTV.Api.Sdk.Client.ApiResponse<ProgramScheduleViewModel>> ApiSchedulesPatchWithHttpInfoAsync(UpdateProgramSchedule updateProgramSchedule, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'updateProgramSchedule' is set
            if (updateProgramSchedule == null)
                throw new ErsatzTV.Api.Sdk.Client.ApiException(400, "Missing required parameter 'updateProgramSchedule' when calling ProgramScheduleApi->ApiSchedulesPatch");


            ErsatzTV.Api.Sdk.Client.RequestOptions localVarRequestOptions = new ErsatzTV.Api.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ErsatzTV.Api.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErsatzTV.Api.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = updateProgramSchedule;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<ProgramScheduleViewModel>("/api/schedules", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSchedulesPatch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProgramSchedule"></param>
        /// <returns>ProgramScheduleViewModel</returns>
        public ProgramScheduleViewModel ApiSchedulesPost(CreateProgramSchedule createProgramSchedule)
        {
            ErsatzTV.Api.Sdk.Client.ApiResponse<ProgramScheduleViewModel> localVarResponse = ApiSchedulesPostWithHttpInfo(createProgramSchedule);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProgramSchedule"></param>
        /// <returns>ApiResponse of ProgramScheduleViewModel</returns>
        public ErsatzTV.Api.Sdk.Client.ApiResponse<ProgramScheduleViewModel> ApiSchedulesPostWithHttpInfo(CreateProgramSchedule createProgramSchedule)
        {
            // verify the required parameter 'createProgramSchedule' is set
            if (createProgramSchedule == null)
                throw new ErsatzTV.Api.Sdk.Client.ApiException(400, "Missing required parameter 'createProgramSchedule' when calling ProgramScheduleApi->ApiSchedulesPost");

            ErsatzTV.Api.Sdk.Client.RequestOptions localVarRequestOptions = new ErsatzTV.Api.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ErsatzTV.Api.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErsatzTV.Api.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createProgramSchedule;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ProgramScheduleViewModel>("/api/schedules", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSchedulesPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProgramSchedule"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProgramScheduleViewModel</returns>
        public async System.Threading.Tasks.Task<ProgramScheduleViewModel> ApiSchedulesPostAsync(CreateProgramSchedule createProgramSchedule, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErsatzTV.Api.Sdk.Client.ApiResponse<ProgramScheduleViewModel> localVarResponse = await ApiSchedulesPostWithHttpInfoAsync(createProgramSchedule, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProgramSchedule"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProgramScheduleViewModel)</returns>
        public async System.Threading.Tasks.Task<ErsatzTV.Api.Sdk.Client.ApiResponse<ProgramScheduleViewModel>> ApiSchedulesPostWithHttpInfoAsync(CreateProgramSchedule createProgramSchedule, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createProgramSchedule' is set
            if (createProgramSchedule == null)
                throw new ErsatzTV.Api.Sdk.Client.ApiException(400, "Missing required parameter 'createProgramSchedule' when calling ProgramScheduleApi->ApiSchedulesPost");


            ErsatzTV.Api.Sdk.Client.RequestOptions localVarRequestOptions = new ErsatzTV.Api.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ErsatzTV.Api.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErsatzTV.Api.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createProgramSchedule;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ProgramScheduleViewModel>("/api/schedules", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSchedulesPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programScheduleId"></param>
        /// <returns>ProgramScheduleViewModel</returns>
        public ProgramScheduleViewModel ApiSchedulesProgramScheduleIdGet(int programScheduleId)
        {
            ErsatzTV.Api.Sdk.Client.ApiResponse<ProgramScheduleViewModel> localVarResponse = ApiSchedulesProgramScheduleIdGetWithHttpInfo(programScheduleId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programScheduleId"></param>
        /// <returns>ApiResponse of ProgramScheduleViewModel</returns>
        public ErsatzTV.Api.Sdk.Client.ApiResponse<ProgramScheduleViewModel> ApiSchedulesProgramScheduleIdGetWithHttpInfo(int programScheduleId)
        {
            ErsatzTV.Api.Sdk.Client.RequestOptions localVarRequestOptions = new ErsatzTV.Api.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ErsatzTV.Api.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErsatzTV.Api.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("programScheduleId", ErsatzTV.Api.Sdk.Client.ClientUtils.ParameterToString(programScheduleId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<ProgramScheduleViewModel>("/api/schedules/{programScheduleId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSchedulesProgramScheduleIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programScheduleId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProgramScheduleViewModel</returns>
        public async System.Threading.Tasks.Task<ProgramScheduleViewModel> ApiSchedulesProgramScheduleIdGetAsync(int programScheduleId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErsatzTV.Api.Sdk.Client.ApiResponse<ProgramScheduleViewModel> localVarResponse = await ApiSchedulesProgramScheduleIdGetWithHttpInfoAsync(programScheduleId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programScheduleId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProgramScheduleViewModel)</returns>
        public async System.Threading.Tasks.Task<ErsatzTV.Api.Sdk.Client.ApiResponse<ProgramScheduleViewModel>> ApiSchedulesProgramScheduleIdGetWithHttpInfoAsync(int programScheduleId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ErsatzTV.Api.Sdk.Client.RequestOptions localVarRequestOptions = new ErsatzTV.Api.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ErsatzTV.Api.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErsatzTV.Api.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("programScheduleId", ErsatzTV.Api.Sdk.Client.ClientUtils.ParameterToString(programScheduleId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ProgramScheduleViewModel>("/api/schedules/{programScheduleId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSchedulesProgramScheduleIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programScheduleId"></param>
        /// <returns>List&lt;ProgramScheduleItemViewModel&gt;</returns>
        public List<ProgramScheduleItemViewModel> ApiSchedulesProgramScheduleIdItemsDelete(int programScheduleId)
        {
            ErsatzTV.Api.Sdk.Client.ApiResponse<List<ProgramScheduleItemViewModel>> localVarResponse = ApiSchedulesProgramScheduleIdItemsDeleteWithHttpInfo(programScheduleId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programScheduleId"></param>
        /// <returns>ApiResponse of List&lt;ProgramScheduleItemViewModel&gt;</returns>
        public ErsatzTV.Api.Sdk.Client.ApiResponse<List<ProgramScheduleItemViewModel>> ApiSchedulesProgramScheduleIdItemsDeleteWithHttpInfo(int programScheduleId)
        {
            ErsatzTV.Api.Sdk.Client.RequestOptions localVarRequestOptions = new ErsatzTV.Api.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ErsatzTV.Api.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErsatzTV.Api.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("programScheduleId", ErsatzTV.Api.Sdk.Client.ClientUtils.ParameterToString(programScheduleId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<List<ProgramScheduleItemViewModel>>("/api/schedules/{programScheduleId}/items", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSchedulesProgramScheduleIdItemsDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programScheduleId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ProgramScheduleItemViewModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProgramScheduleItemViewModel>> ApiSchedulesProgramScheduleIdItemsDeleteAsync(int programScheduleId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErsatzTV.Api.Sdk.Client.ApiResponse<List<ProgramScheduleItemViewModel>> localVarResponse = await ApiSchedulesProgramScheduleIdItemsDeleteWithHttpInfoAsync(programScheduleId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programScheduleId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ProgramScheduleItemViewModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ErsatzTV.Api.Sdk.Client.ApiResponse<List<ProgramScheduleItemViewModel>>> ApiSchedulesProgramScheduleIdItemsDeleteWithHttpInfoAsync(int programScheduleId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ErsatzTV.Api.Sdk.Client.RequestOptions localVarRequestOptions = new ErsatzTV.Api.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ErsatzTV.Api.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErsatzTV.Api.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("programScheduleId", ErsatzTV.Api.Sdk.Client.ClientUtils.ParameterToString(programScheduleId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<List<ProgramScheduleItemViewModel>>("/api/schedules/{programScheduleId}/items", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSchedulesProgramScheduleIdItemsDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programScheduleId"></param>
        /// <returns>List&lt;ProgramScheduleItemViewModel&gt;</returns>
        public List<ProgramScheduleItemViewModel> ApiSchedulesProgramScheduleIdItemsGet(int programScheduleId)
        {
            ErsatzTV.Api.Sdk.Client.ApiResponse<List<ProgramScheduleItemViewModel>> localVarResponse = ApiSchedulesProgramScheduleIdItemsGetWithHttpInfo(programScheduleId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programScheduleId"></param>
        /// <returns>ApiResponse of List&lt;ProgramScheduleItemViewModel&gt;</returns>
        public ErsatzTV.Api.Sdk.Client.ApiResponse<List<ProgramScheduleItemViewModel>> ApiSchedulesProgramScheduleIdItemsGetWithHttpInfo(int programScheduleId)
        {
            ErsatzTV.Api.Sdk.Client.RequestOptions localVarRequestOptions = new ErsatzTV.Api.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ErsatzTV.Api.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErsatzTV.Api.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("programScheduleId", ErsatzTV.Api.Sdk.Client.ClientUtils.ParameterToString(programScheduleId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ProgramScheduleItemViewModel>>("/api/schedules/{programScheduleId}/items", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSchedulesProgramScheduleIdItemsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programScheduleId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ProgramScheduleItemViewModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProgramScheduleItemViewModel>> ApiSchedulesProgramScheduleIdItemsGetAsync(int programScheduleId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErsatzTV.Api.Sdk.Client.ApiResponse<List<ProgramScheduleItemViewModel>> localVarResponse = await ApiSchedulesProgramScheduleIdItemsGetWithHttpInfoAsync(programScheduleId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programScheduleId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ProgramScheduleItemViewModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ErsatzTV.Api.Sdk.Client.ApiResponse<List<ProgramScheduleItemViewModel>>> ApiSchedulesProgramScheduleIdItemsGetWithHttpInfoAsync(int programScheduleId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ErsatzTV.Api.Sdk.Client.RequestOptions localVarRequestOptions = new ErsatzTV.Api.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ErsatzTV.Api.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErsatzTV.Api.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("programScheduleId", ErsatzTV.Api.Sdk.Client.ClientUtils.ParameterToString(programScheduleId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ProgramScheduleItemViewModel>>("/api/schedules/{programScheduleId}/items", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSchedulesProgramScheduleIdItemsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programScheduleId"></param>
        /// <param name="replaceProgramScheduleItem"></param>
        /// <returns>List&lt;ProgramScheduleItemViewModel&gt;</returns>
        public List<ProgramScheduleItemViewModel> ApiSchedulesProgramScheduleIdItemsPut(int programScheduleId, List<ReplaceProgramScheduleItem> replaceProgramScheduleItem)
        {
            ErsatzTV.Api.Sdk.Client.ApiResponse<List<ProgramScheduleItemViewModel>> localVarResponse = ApiSchedulesProgramScheduleIdItemsPutWithHttpInfo(programScheduleId, replaceProgramScheduleItem);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programScheduleId"></param>
        /// <param name="replaceProgramScheduleItem"></param>
        /// <returns>ApiResponse of List&lt;ProgramScheduleItemViewModel&gt;</returns>
        public ErsatzTV.Api.Sdk.Client.ApiResponse<List<ProgramScheduleItemViewModel>> ApiSchedulesProgramScheduleIdItemsPutWithHttpInfo(int programScheduleId, List<ReplaceProgramScheduleItem> replaceProgramScheduleItem)
        {
            // verify the required parameter 'replaceProgramScheduleItem' is set
            if (replaceProgramScheduleItem == null)
                throw new ErsatzTV.Api.Sdk.Client.ApiException(400, "Missing required parameter 'replaceProgramScheduleItem' when calling ProgramScheduleApi->ApiSchedulesProgramScheduleIdItemsPut");

            ErsatzTV.Api.Sdk.Client.RequestOptions localVarRequestOptions = new ErsatzTV.Api.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ErsatzTV.Api.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErsatzTV.Api.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("programScheduleId", ErsatzTV.Api.Sdk.Client.ClientUtils.ParameterToString(programScheduleId)); // path parameter
            localVarRequestOptions.Data = replaceProgramScheduleItem;


            // make the HTTP request
            var localVarResponse = this.Client.Put<List<ProgramScheduleItemViewModel>>("/api/schedules/{programScheduleId}/items", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSchedulesProgramScheduleIdItemsPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programScheduleId"></param>
        /// <param name="replaceProgramScheduleItem"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ProgramScheduleItemViewModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProgramScheduleItemViewModel>> ApiSchedulesProgramScheduleIdItemsPutAsync(int programScheduleId, List<ReplaceProgramScheduleItem> replaceProgramScheduleItem, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErsatzTV.Api.Sdk.Client.ApiResponse<List<ProgramScheduleItemViewModel>> localVarResponse = await ApiSchedulesProgramScheduleIdItemsPutWithHttpInfoAsync(programScheduleId, replaceProgramScheduleItem, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programScheduleId"></param>
        /// <param name="replaceProgramScheduleItem"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ProgramScheduleItemViewModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ErsatzTV.Api.Sdk.Client.ApiResponse<List<ProgramScheduleItemViewModel>>> ApiSchedulesProgramScheduleIdItemsPutWithHttpInfoAsync(int programScheduleId, List<ReplaceProgramScheduleItem> replaceProgramScheduleItem, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'replaceProgramScheduleItem' is set
            if (replaceProgramScheduleItem == null)
                throw new ErsatzTV.Api.Sdk.Client.ApiException(400, "Missing required parameter 'replaceProgramScheduleItem' when calling ProgramScheduleApi->ApiSchedulesProgramScheduleIdItemsPut");


            ErsatzTV.Api.Sdk.Client.RequestOptions localVarRequestOptions = new ErsatzTV.Api.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ErsatzTV.Api.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErsatzTV.Api.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("programScheduleId", ErsatzTV.Api.Sdk.Client.ClientUtils.ParameterToString(programScheduleId)); // path parameter
            localVarRequestOptions.Data = replaceProgramScheduleItem;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<List<ProgramScheduleItemViewModel>>("/api/schedules/{programScheduleId}/items", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSchedulesProgramScheduleIdItemsPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
