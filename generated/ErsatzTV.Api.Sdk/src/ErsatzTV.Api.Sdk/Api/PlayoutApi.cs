/*
 * ErsatzTV API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ErsatzTV.Api.Sdk.Client;
using ErsatzTV.Api.Sdk.Model;

namespace ErsatzTV.Api.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPlayoutApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deletePlayout"></param>
        /// <returns></returns>
        void ApiPlayoutsDelete(DeletePlayout deletePlayout);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deletePlayout"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiPlayoutsDeleteWithHttpInfo(DeletePlayout deletePlayout);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;PlayoutViewModel&gt;</returns>
        List<PlayoutViewModel> ApiPlayoutsGet();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;PlayoutViewModel&gt;</returns>
        ApiResponse<List<PlayoutViewModel>> ApiPlayoutsGetWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updatePlayout"></param>
        /// <returns>PlayoutViewModel</returns>
        PlayoutViewModel ApiPlayoutsPatch(UpdatePlayout updatePlayout);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updatePlayout"></param>
        /// <returns>ApiResponse of PlayoutViewModel</returns>
        ApiResponse<PlayoutViewModel> ApiPlayoutsPatchWithHttpInfo(UpdatePlayout updatePlayout);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playoutId"></param>
        /// <returns>PlayoutViewModel</returns>
        PlayoutViewModel ApiPlayoutsPlayoutIdGet(int playoutId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playoutId"></param>
        /// <returns>ApiResponse of PlayoutViewModel</returns>
        ApiResponse<PlayoutViewModel> ApiPlayoutsPlayoutIdGetWithHttpInfo(int playoutId);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPlayout"></param>
        /// <returns>PlayoutViewModel</returns>
        PlayoutViewModel ApiPlayoutsPost(CreatePlayout createPlayout);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPlayout"></param>
        /// <returns>ApiResponse of PlayoutViewModel</returns>
        ApiResponse<PlayoutViewModel> ApiPlayoutsPostWithHttpInfo(CreatePlayout createPlayout);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPlayoutApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deletePlayout"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiPlayoutsDeleteAsync(DeletePlayout deletePlayout, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deletePlayout"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiPlayoutsDeleteWithHttpInfoAsync(DeletePlayout deletePlayout, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PlayoutViewModel&gt;</returns>
        System.Threading.Tasks.Task<List<PlayoutViewModel>> ApiPlayoutsGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PlayoutViewModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PlayoutViewModel>>> ApiPlayoutsGetWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updatePlayout"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PlayoutViewModel</returns>
        System.Threading.Tasks.Task<PlayoutViewModel> ApiPlayoutsPatchAsync(UpdatePlayout updatePlayout, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updatePlayout"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlayoutViewModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<PlayoutViewModel>> ApiPlayoutsPatchWithHttpInfoAsync(UpdatePlayout updatePlayout, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playoutId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PlayoutViewModel</returns>
        System.Threading.Tasks.Task<PlayoutViewModel> ApiPlayoutsPlayoutIdGetAsync(int playoutId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playoutId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlayoutViewModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<PlayoutViewModel>> ApiPlayoutsPlayoutIdGetWithHttpInfoAsync(int playoutId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPlayout"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PlayoutViewModel</returns>
        System.Threading.Tasks.Task<PlayoutViewModel> ApiPlayoutsPostAsync(CreatePlayout createPlayout, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPlayout"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlayoutViewModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<PlayoutViewModel>> ApiPlayoutsPostWithHttpInfoAsync(CreatePlayout createPlayout, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPlayoutApi : IPlayoutApiSync, IPlayoutApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PlayoutApi : IPlayoutApi
    {
        private ErsatzTV.Api.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PlayoutApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PlayoutApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlayoutApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PlayoutApi(String basePath)
        {
            this.Configuration = ErsatzTV.Api.Sdk.Client.Configuration.MergeConfigurations(
                ErsatzTV.Api.Sdk.Client.GlobalConfiguration.Instance,
                new ErsatzTV.Api.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ErsatzTV.Api.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ErsatzTV.Api.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ErsatzTV.Api.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlayoutApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PlayoutApi(ErsatzTV.Api.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ErsatzTV.Api.Sdk.Client.Configuration.MergeConfigurations(
                ErsatzTV.Api.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ErsatzTV.Api.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ErsatzTV.Api.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ErsatzTV.Api.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlayoutApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PlayoutApi(ErsatzTV.Api.Sdk.Client.ISynchronousClient client, ErsatzTV.Api.Sdk.Client.IAsynchronousClient asyncClient, ErsatzTV.Api.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ErsatzTV.Api.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ErsatzTV.Api.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ErsatzTV.Api.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ErsatzTV.Api.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ErsatzTV.Api.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deletePlayout"></param>
        /// <returns></returns>
        public void ApiPlayoutsDelete(DeletePlayout deletePlayout)
        {
            ApiPlayoutsDeleteWithHttpInfo(deletePlayout);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deletePlayout"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ErsatzTV.Api.Sdk.Client.ApiResponse<Object> ApiPlayoutsDeleteWithHttpInfo(DeletePlayout deletePlayout)
        {
            // verify the required parameter 'deletePlayout' is set
            if (deletePlayout == null)
                throw new ErsatzTV.Api.Sdk.Client.ApiException(400, "Missing required parameter 'deletePlayout' when calling PlayoutApi->ApiPlayoutsDelete");

            ErsatzTV.Api.Sdk.Client.RequestOptions localVarRequestOptions = new ErsatzTV.Api.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ErsatzTV.Api.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErsatzTV.Api.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = deletePlayout;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/playouts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPlayoutsDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deletePlayout"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiPlayoutsDeleteAsync(DeletePlayout deletePlayout, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiPlayoutsDeleteWithHttpInfoAsync(deletePlayout, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deletePlayout"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ErsatzTV.Api.Sdk.Client.ApiResponse<Object>> ApiPlayoutsDeleteWithHttpInfoAsync(DeletePlayout deletePlayout, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'deletePlayout' is set
            if (deletePlayout == null)
                throw new ErsatzTV.Api.Sdk.Client.ApiException(400, "Missing required parameter 'deletePlayout' when calling PlayoutApi->ApiPlayoutsDelete");


            ErsatzTV.Api.Sdk.Client.RequestOptions localVarRequestOptions = new ErsatzTV.Api.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ErsatzTV.Api.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErsatzTV.Api.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = deletePlayout;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/playouts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPlayoutsDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;PlayoutViewModel&gt;</returns>
        public List<PlayoutViewModel> ApiPlayoutsGet()
        {
            ErsatzTV.Api.Sdk.Client.ApiResponse<List<PlayoutViewModel>> localVarResponse = ApiPlayoutsGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;PlayoutViewModel&gt;</returns>
        public ErsatzTV.Api.Sdk.Client.ApiResponse<List<PlayoutViewModel>> ApiPlayoutsGetWithHttpInfo()
        {
            ErsatzTV.Api.Sdk.Client.RequestOptions localVarRequestOptions = new ErsatzTV.Api.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ErsatzTV.Api.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErsatzTV.Api.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PlayoutViewModel>>("/api/playouts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPlayoutsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PlayoutViewModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<PlayoutViewModel>> ApiPlayoutsGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErsatzTV.Api.Sdk.Client.ApiResponse<List<PlayoutViewModel>> localVarResponse = await ApiPlayoutsGetWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PlayoutViewModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ErsatzTV.Api.Sdk.Client.ApiResponse<List<PlayoutViewModel>>> ApiPlayoutsGetWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ErsatzTV.Api.Sdk.Client.RequestOptions localVarRequestOptions = new ErsatzTV.Api.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ErsatzTV.Api.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErsatzTV.Api.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PlayoutViewModel>>("/api/playouts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPlayoutsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updatePlayout"></param>
        /// <returns>PlayoutViewModel</returns>
        public PlayoutViewModel ApiPlayoutsPatch(UpdatePlayout updatePlayout)
        {
            ErsatzTV.Api.Sdk.Client.ApiResponse<PlayoutViewModel> localVarResponse = ApiPlayoutsPatchWithHttpInfo(updatePlayout);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updatePlayout"></param>
        /// <returns>ApiResponse of PlayoutViewModel</returns>
        public ErsatzTV.Api.Sdk.Client.ApiResponse<PlayoutViewModel> ApiPlayoutsPatchWithHttpInfo(UpdatePlayout updatePlayout)
        {
            // verify the required parameter 'updatePlayout' is set
            if (updatePlayout == null)
                throw new ErsatzTV.Api.Sdk.Client.ApiException(400, "Missing required parameter 'updatePlayout' when calling PlayoutApi->ApiPlayoutsPatch");

            ErsatzTV.Api.Sdk.Client.RequestOptions localVarRequestOptions = new ErsatzTV.Api.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ErsatzTV.Api.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErsatzTV.Api.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = updatePlayout;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<PlayoutViewModel>("/api/playouts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPlayoutsPatch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updatePlayout"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PlayoutViewModel</returns>
        public async System.Threading.Tasks.Task<PlayoutViewModel> ApiPlayoutsPatchAsync(UpdatePlayout updatePlayout, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErsatzTV.Api.Sdk.Client.ApiResponse<PlayoutViewModel> localVarResponse = await ApiPlayoutsPatchWithHttpInfoAsync(updatePlayout, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updatePlayout"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlayoutViewModel)</returns>
        public async System.Threading.Tasks.Task<ErsatzTV.Api.Sdk.Client.ApiResponse<PlayoutViewModel>> ApiPlayoutsPatchWithHttpInfoAsync(UpdatePlayout updatePlayout, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'updatePlayout' is set
            if (updatePlayout == null)
                throw new ErsatzTV.Api.Sdk.Client.ApiException(400, "Missing required parameter 'updatePlayout' when calling PlayoutApi->ApiPlayoutsPatch");


            ErsatzTV.Api.Sdk.Client.RequestOptions localVarRequestOptions = new ErsatzTV.Api.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ErsatzTV.Api.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErsatzTV.Api.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = updatePlayout;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<PlayoutViewModel>("/api/playouts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPlayoutsPatch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playoutId"></param>
        /// <returns>PlayoutViewModel</returns>
        public PlayoutViewModel ApiPlayoutsPlayoutIdGet(int playoutId)
        {
            ErsatzTV.Api.Sdk.Client.ApiResponse<PlayoutViewModel> localVarResponse = ApiPlayoutsPlayoutIdGetWithHttpInfo(playoutId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playoutId"></param>
        /// <returns>ApiResponse of PlayoutViewModel</returns>
        public ErsatzTV.Api.Sdk.Client.ApiResponse<PlayoutViewModel> ApiPlayoutsPlayoutIdGetWithHttpInfo(int playoutId)
        {
            ErsatzTV.Api.Sdk.Client.RequestOptions localVarRequestOptions = new ErsatzTV.Api.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ErsatzTV.Api.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErsatzTV.Api.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("playoutId", ErsatzTV.Api.Sdk.Client.ClientUtils.ParameterToString(playoutId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<PlayoutViewModel>("/api/playouts/{playoutId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPlayoutsPlayoutIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playoutId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PlayoutViewModel</returns>
        public async System.Threading.Tasks.Task<PlayoutViewModel> ApiPlayoutsPlayoutIdGetAsync(int playoutId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErsatzTV.Api.Sdk.Client.ApiResponse<PlayoutViewModel> localVarResponse = await ApiPlayoutsPlayoutIdGetWithHttpInfoAsync(playoutId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playoutId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlayoutViewModel)</returns>
        public async System.Threading.Tasks.Task<ErsatzTV.Api.Sdk.Client.ApiResponse<PlayoutViewModel>> ApiPlayoutsPlayoutIdGetWithHttpInfoAsync(int playoutId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ErsatzTV.Api.Sdk.Client.RequestOptions localVarRequestOptions = new ErsatzTV.Api.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ErsatzTV.Api.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErsatzTV.Api.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("playoutId", ErsatzTV.Api.Sdk.Client.ClientUtils.ParameterToString(playoutId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PlayoutViewModel>("/api/playouts/{playoutId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPlayoutsPlayoutIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPlayout"></param>
        /// <returns>PlayoutViewModel</returns>
        public PlayoutViewModel ApiPlayoutsPost(CreatePlayout createPlayout)
        {
            ErsatzTV.Api.Sdk.Client.ApiResponse<PlayoutViewModel> localVarResponse = ApiPlayoutsPostWithHttpInfo(createPlayout);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPlayout"></param>
        /// <returns>ApiResponse of PlayoutViewModel</returns>
        public ErsatzTV.Api.Sdk.Client.ApiResponse<PlayoutViewModel> ApiPlayoutsPostWithHttpInfo(CreatePlayout createPlayout)
        {
            // verify the required parameter 'createPlayout' is set
            if (createPlayout == null)
                throw new ErsatzTV.Api.Sdk.Client.ApiException(400, "Missing required parameter 'createPlayout' when calling PlayoutApi->ApiPlayoutsPost");

            ErsatzTV.Api.Sdk.Client.RequestOptions localVarRequestOptions = new ErsatzTV.Api.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = ErsatzTV.Api.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErsatzTV.Api.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createPlayout;


            // make the HTTP request
            var localVarResponse = this.Client.Post<PlayoutViewModel>("/api/playouts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPlayoutsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPlayout"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PlayoutViewModel</returns>
        public async System.Threading.Tasks.Task<PlayoutViewModel> ApiPlayoutsPostAsync(CreatePlayout createPlayout, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ErsatzTV.Api.Sdk.Client.ApiResponse<PlayoutViewModel> localVarResponse = await ApiPlayoutsPostWithHttpInfoAsync(createPlayout, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ErsatzTV.Api.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPlayout"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlayoutViewModel)</returns>
        public async System.Threading.Tasks.Task<ErsatzTV.Api.Sdk.Client.ApiResponse<PlayoutViewModel>> ApiPlayoutsPostWithHttpInfoAsync(CreatePlayout createPlayout, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createPlayout' is set
            if (createPlayout == null)
                throw new ErsatzTV.Api.Sdk.Client.ApiException(400, "Missing required parameter 'createPlayout' when calling PlayoutApi->ApiPlayoutsPost");


            ErsatzTV.Api.Sdk.Client.RequestOptions localVarRequestOptions = new ErsatzTV.Api.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = ErsatzTV.Api.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = ErsatzTV.Api.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createPlayout;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<PlayoutViewModel>("/api/playouts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiPlayoutsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
