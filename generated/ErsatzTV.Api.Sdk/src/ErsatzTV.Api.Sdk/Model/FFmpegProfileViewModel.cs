/*
 * ErsatzTV API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ErsatzTV.Api.Sdk.Client.OpenAPIDateConverter;

namespace ErsatzTV.Api.Sdk.Model
{
    /// <summary>
    /// FFmpegProfileViewModel
    /// </summary>
    [DataContract(Name = "FFmpegProfileViewModel")]
    public partial class FFmpegProfileViewModel : IEquatable<FFmpegProfileViewModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FFmpegProfileViewModel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="threadCount">threadCount.</param>
        /// <param name="transcode">transcode.</param>
        /// <param name="resolution">resolution.</param>
        /// <param name="normalizeResolution">normalizeResolution.</param>
        /// <param name="videoCodec">videoCodec.</param>
        /// <param name="normalizeVideoCodec">normalizeVideoCodec.</param>
        /// <param name="videoBitrate">videoBitrate.</param>
        /// <param name="videoBufferSize">videoBufferSize.</param>
        /// <param name="audioCodec">audioCodec.</param>
        /// <param name="normalizeAudioCodec">normalizeAudioCodec.</param>
        /// <param name="audioBitrate">audioBitrate.</param>
        /// <param name="audioBufferSize">audioBufferSize.</param>
        /// <param name="audioVolume">audioVolume.</param>
        /// <param name="audioChannels">audioChannels.</param>
        /// <param name="audioSampleRate">audioSampleRate.</param>
        /// <param name="normalizeAudio">normalizeAudio.</param>
        public FFmpegProfileViewModel(int id = default(int), string name = default(string), int threadCount = default(int), bool transcode = default(bool), ResolutionViewModel resolution = default(ResolutionViewModel), bool normalizeResolution = default(bool), string videoCodec = default(string), bool normalizeVideoCodec = default(bool), int videoBitrate = default(int), int videoBufferSize = default(int), string audioCodec = default(string), bool normalizeAudioCodec = default(bool), int audioBitrate = default(int), int audioBufferSize = default(int), int audioVolume = default(int), int audioChannels = default(int), int audioSampleRate = default(int), bool normalizeAudio = default(bool))
        {
            this.Id = id;
            this.Name = name;
            this.ThreadCount = threadCount;
            this.Transcode = transcode;
            this.Resolution = resolution;
            this.NormalizeResolution = normalizeResolution;
            this.VideoCodec = videoCodec;
            this.NormalizeVideoCodec = normalizeVideoCodec;
            this.VideoBitrate = videoBitrate;
            this.VideoBufferSize = videoBufferSize;
            this.AudioCodec = audioCodec;
            this.NormalizeAudioCodec = normalizeAudioCodec;
            this.AudioBitrate = audioBitrate;
            this.AudioBufferSize = audioBufferSize;
            this.AudioVolume = audioVolume;
            this.AudioChannels = audioChannels;
            this.AudioSampleRate = audioSampleRate;
            this.NormalizeAudio = normalizeAudio;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ThreadCount
        /// </summary>
        [DataMember(Name = "threadCount", EmitDefaultValue = false)]
        public int ThreadCount { get; set; }

        /// <summary>
        /// Gets or Sets Transcode
        /// </summary>
        [DataMember(Name = "transcode", EmitDefaultValue = false)]
        public bool Transcode { get; set; }

        /// <summary>
        /// Gets or Sets Resolution
        /// </summary>
        [DataMember(Name = "resolution", EmitDefaultValue = false)]
        public ResolutionViewModel Resolution { get; set; }

        /// <summary>
        /// Gets or Sets NormalizeResolution
        /// </summary>
        [DataMember(Name = "normalizeResolution", EmitDefaultValue = false)]
        public bool NormalizeResolution { get; set; }

        /// <summary>
        /// Gets or Sets VideoCodec
        /// </summary>
        [DataMember(Name = "videoCodec", EmitDefaultValue = true)]
        public string VideoCodec { get; set; }

        /// <summary>
        /// Gets or Sets NormalizeVideoCodec
        /// </summary>
        [DataMember(Name = "normalizeVideoCodec", EmitDefaultValue = false)]
        public bool NormalizeVideoCodec { get; set; }

        /// <summary>
        /// Gets or Sets VideoBitrate
        /// </summary>
        [DataMember(Name = "videoBitrate", EmitDefaultValue = false)]
        public int VideoBitrate { get; set; }

        /// <summary>
        /// Gets or Sets VideoBufferSize
        /// </summary>
        [DataMember(Name = "videoBufferSize", EmitDefaultValue = false)]
        public int VideoBufferSize { get; set; }

        /// <summary>
        /// Gets or Sets AudioCodec
        /// </summary>
        [DataMember(Name = "audioCodec", EmitDefaultValue = true)]
        public string AudioCodec { get; set; }

        /// <summary>
        /// Gets or Sets NormalizeAudioCodec
        /// </summary>
        [DataMember(Name = "normalizeAudioCodec", EmitDefaultValue = false)]
        public bool NormalizeAudioCodec { get; set; }

        /// <summary>
        /// Gets or Sets AudioBitrate
        /// </summary>
        [DataMember(Name = "audioBitrate", EmitDefaultValue = false)]
        public int AudioBitrate { get; set; }

        /// <summary>
        /// Gets or Sets AudioBufferSize
        /// </summary>
        [DataMember(Name = "audioBufferSize", EmitDefaultValue = false)]
        public int AudioBufferSize { get; set; }

        /// <summary>
        /// Gets or Sets AudioVolume
        /// </summary>
        [DataMember(Name = "audioVolume", EmitDefaultValue = false)]
        public int AudioVolume { get; set; }

        /// <summary>
        /// Gets or Sets AudioChannels
        /// </summary>
        [DataMember(Name = "audioChannels", EmitDefaultValue = false)]
        public int AudioChannels { get; set; }

        /// <summary>
        /// Gets or Sets AudioSampleRate
        /// </summary>
        [DataMember(Name = "audioSampleRate", EmitDefaultValue = false)]
        public int AudioSampleRate { get; set; }

        /// <summary>
        /// Gets or Sets NormalizeAudio
        /// </summary>
        [DataMember(Name = "normalizeAudio", EmitDefaultValue = false)]
        public bool NormalizeAudio { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FFmpegProfileViewModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ThreadCount: ").Append(ThreadCount).Append("\n");
            sb.Append("  Transcode: ").Append(Transcode).Append("\n");
            sb.Append("  Resolution: ").Append(Resolution).Append("\n");
            sb.Append("  NormalizeResolution: ").Append(NormalizeResolution).Append("\n");
            sb.Append("  VideoCodec: ").Append(VideoCodec).Append("\n");
            sb.Append("  NormalizeVideoCodec: ").Append(NormalizeVideoCodec).Append("\n");
            sb.Append("  VideoBitrate: ").Append(VideoBitrate).Append("\n");
            sb.Append("  VideoBufferSize: ").Append(VideoBufferSize).Append("\n");
            sb.Append("  AudioCodec: ").Append(AudioCodec).Append("\n");
            sb.Append("  NormalizeAudioCodec: ").Append(NormalizeAudioCodec).Append("\n");
            sb.Append("  AudioBitrate: ").Append(AudioBitrate).Append("\n");
            sb.Append("  AudioBufferSize: ").Append(AudioBufferSize).Append("\n");
            sb.Append("  AudioVolume: ").Append(AudioVolume).Append("\n");
            sb.Append("  AudioChannels: ").Append(AudioChannels).Append("\n");
            sb.Append("  AudioSampleRate: ").Append(AudioSampleRate).Append("\n");
            sb.Append("  NormalizeAudio: ").Append(NormalizeAudio).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FFmpegProfileViewModel);
        }

        /// <summary>
        /// Returns true if FFmpegProfileViewModel instances are equal
        /// </summary>
        /// <param name="input">Instance of FFmpegProfileViewModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FFmpegProfileViewModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ThreadCount == input.ThreadCount ||
                    this.ThreadCount.Equals(input.ThreadCount)
                ) && 
                (
                    this.Transcode == input.Transcode ||
                    this.Transcode.Equals(input.Transcode)
                ) && 
                (
                    this.Resolution == input.Resolution ||
                    (this.Resolution != null &&
                    this.Resolution.Equals(input.Resolution))
                ) && 
                (
                    this.NormalizeResolution == input.NormalizeResolution ||
                    this.NormalizeResolution.Equals(input.NormalizeResolution)
                ) && 
                (
                    this.VideoCodec == input.VideoCodec ||
                    (this.VideoCodec != null &&
                    this.VideoCodec.Equals(input.VideoCodec))
                ) && 
                (
                    this.NormalizeVideoCodec == input.NormalizeVideoCodec ||
                    this.NormalizeVideoCodec.Equals(input.NormalizeVideoCodec)
                ) && 
                (
                    this.VideoBitrate == input.VideoBitrate ||
                    this.VideoBitrate.Equals(input.VideoBitrate)
                ) && 
                (
                    this.VideoBufferSize == input.VideoBufferSize ||
                    this.VideoBufferSize.Equals(input.VideoBufferSize)
                ) && 
                (
                    this.AudioCodec == input.AudioCodec ||
                    (this.AudioCodec != null &&
                    this.AudioCodec.Equals(input.AudioCodec))
                ) && 
                (
                    this.NormalizeAudioCodec == input.NormalizeAudioCodec ||
                    this.NormalizeAudioCodec.Equals(input.NormalizeAudioCodec)
                ) && 
                (
                    this.AudioBitrate == input.AudioBitrate ||
                    this.AudioBitrate.Equals(input.AudioBitrate)
                ) && 
                (
                    this.AudioBufferSize == input.AudioBufferSize ||
                    this.AudioBufferSize.Equals(input.AudioBufferSize)
                ) && 
                (
                    this.AudioVolume == input.AudioVolume ||
                    this.AudioVolume.Equals(input.AudioVolume)
                ) && 
                (
                    this.AudioChannels == input.AudioChannels ||
                    this.AudioChannels.Equals(input.AudioChannels)
                ) && 
                (
                    this.AudioSampleRate == input.AudioSampleRate ||
                    this.AudioSampleRate.Equals(input.AudioSampleRate)
                ) && 
                (
                    this.NormalizeAudio == input.NormalizeAudio ||
                    this.NormalizeAudio.Equals(input.NormalizeAudio)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                hashCode = hashCode * 59 + this.ThreadCount.GetHashCode();
                hashCode = hashCode * 59 + this.Transcode.GetHashCode();
                if (this.Resolution != null)
                    hashCode = hashCode * 59 + this.Resolution.GetHashCode();
                hashCode = hashCode * 59 + this.NormalizeResolution.GetHashCode();
                if (this.VideoCodec != null)
                    hashCode = hashCode * 59 + this.VideoCodec.GetHashCode();
                hashCode = hashCode * 59 + this.NormalizeVideoCodec.GetHashCode();
                hashCode = hashCode * 59 + this.VideoBitrate.GetHashCode();
                hashCode = hashCode * 59 + this.VideoBufferSize.GetHashCode();
                if (this.AudioCodec != null)
                    hashCode = hashCode * 59 + this.AudioCodec.GetHashCode();
                hashCode = hashCode * 59 + this.NormalizeAudioCodec.GetHashCode();
                hashCode = hashCode * 59 + this.AudioBitrate.GetHashCode();
                hashCode = hashCode * 59 + this.AudioBufferSize.GetHashCode();
                hashCode = hashCode * 59 + this.AudioVolume.GetHashCode();
                hashCode = hashCode * 59 + this.AudioChannels.GetHashCode();
                hashCode = hashCode * 59 + this.AudioSampleRate.GetHashCode();
                hashCode = hashCode * 59 + this.NormalizeAudio.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
