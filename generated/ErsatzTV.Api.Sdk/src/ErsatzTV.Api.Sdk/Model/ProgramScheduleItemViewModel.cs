/*
 * ErsatzTV API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ErsatzTV.Api.Sdk.Client.OpenAPIDateConverter;

namespace ErsatzTV.Api.Sdk.Model
{
    /// <summary>
    /// ProgramScheduleItemViewModel
    /// </summary>
    [DataContract(Name = "ProgramScheduleItemViewModel")]
    public partial class ProgramScheduleItemViewModel : IEquatable<ProgramScheduleItemViewModel>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets StartType
        /// </summary>
        [DataMember(Name = "startType", EmitDefaultValue = false)]
        public StartType? StartType { get; set; }
        /// <summary>
        /// Gets or Sets PlayoutMode
        /// </summary>
        [DataMember(Name = "playoutMode", EmitDefaultValue = false)]
        public PlayoutMode? PlayoutMode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProgramScheduleItemViewModel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="index">index.</param>
        /// <param name="startType">startType.</param>
        /// <param name="startTime">startTime.</param>
        /// <param name="playoutMode">playoutMode.</param>
        /// <param name="mediaCollection">mediaCollection.</param>
        public ProgramScheduleItemViewModel(int id = default(int), int index = default(int), StartType? startType = default(StartType?), string startTime = default(string), PlayoutMode? playoutMode = default(PlayoutMode?), MediaCollectionViewModel mediaCollection = default(MediaCollectionViewModel))
        {
            this.Id = id;
            this.Index = index;
            this.StartType = startType;
            this.StartTime = startTime;
            this.PlayoutMode = playoutMode;
            this.MediaCollection = mediaCollection;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Index
        /// </summary>
        [DataMember(Name = "index", EmitDefaultValue = false)]
        public int Index { get; set; }

        /// <summary>
        /// Gets or Sets StartTime
        /// </summary>
        [DataMember(Name = "startTime", EmitDefaultValue = true)]
        public string StartTime { get; set; }

        /// <summary>
        /// Gets or Sets MediaCollection
        /// </summary>
        [DataMember(Name = "mediaCollection", EmitDefaultValue = false)]
        public MediaCollectionViewModel MediaCollection { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProgramScheduleItemViewModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  StartType: ").Append(StartType).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  PlayoutMode: ").Append(PlayoutMode).Append("\n");
            sb.Append("  MediaCollection: ").Append(MediaCollection).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProgramScheduleItemViewModel);
        }

        /// <summary>
        /// Returns true if ProgramScheduleItemViewModel instances are equal
        /// </summary>
        /// <param name="input">Instance of ProgramScheduleItemViewModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProgramScheduleItemViewModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Index == input.Index ||
                    this.Index.Equals(input.Index)
                ) && 
                (
                    this.StartType == input.StartType ||
                    this.StartType.Equals(input.StartType)
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.PlayoutMode == input.PlayoutMode ||
                    this.PlayoutMode.Equals(input.PlayoutMode)
                ) && 
                (
                    this.MediaCollection == input.MediaCollection ||
                    (this.MediaCollection != null &&
                    this.MediaCollection.Equals(input.MediaCollection))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                hashCode = hashCode * 59 + this.Index.GetHashCode();
                hashCode = hashCode * 59 + this.StartType.GetHashCode();
                if (this.StartTime != null)
                    hashCode = hashCode * 59 + this.StartTime.GetHashCode();
                hashCode = hashCode * 59 + this.PlayoutMode.GetHashCode();
                if (this.MediaCollection != null)
                    hashCode = hashCode * 59 + this.MediaCollection.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
